@use "base";

@keyframes rotate_1 {
  from {
    transform: rotate(0deg);
  }

  50% {
    transform: rotate(30deg);
  }
}

@keyframes rotate_2 {
  from {
    transform: rotate(0deg);
  }

  50% {
    transform: rotate(-30deg);
  }
}

.T,
.C,
.A,
.E,
.T3 {
  animation-name: rotate_1;
  animation-duration: 2.5s; /* Change this to the desired duration */
  animation-iteration-count: infinite; /* Change this to the desired number of iterations */
}

.I,
.T2,
.O,
.C2 {
  animation-name: rotate_2;
  animation-duration: 2s; /* Change this to the desired duration */
  animation-iteration-count: infinite; /* Change this to the desired number of iterations */
}

img {
  image-rendering: -moz-crisp-edges; /* Firefox */
  image-rendering: -o-crisp-edges; /* Opera */
  image-rendering: -webkit-optimize-contrast; /* Webkit (non-standard naming) */
  image-rendering: crisp-edges;
  -ms-interpolation-mode: nearest-neighbor;
}

html,
body {
  height: 100%;
  color: base.$yellow;
}
body {
  background-image: url(../img/background.png);
  background-color: #4e31aa;
  user-select: none;

  * {
    font-family: base.$font-bubble;
  }

  .tictactoe {
    font-weight: bolder;
    font-size: 50px;
    letter-spacing: 10px;
    border-radius: 15px;
    background-color: rgba($color: #4e31aa, $alpha: 0.8);
    box-shadow: 0 0 30px 45px rgba($color: #4e31aa, $alpha: 0.8);

    img {
      transition: all 0.3s ease-in-out;
      width: 100px;
      height: 100px;
    }
  }

  .startButton {
    transform: rotate(-3deg);
    background-color: #edd174;
    width: 200px;
    height: 60px;
    @include base.button-style;
  }

  #start.buttonActive,
  .opponent.buttonActive,
  .difficulity.buttonActive {
    box-shadow: 0 0 30px 5px rgba($color: white, $alpha: 0.8);
    transform: scale(1.1);
  }
}

.opponentScreen .opponents,
.shapeScreen .shapes {
  height: 100%;
}

h2 {
  font-size: 40px;
  padding: 15px;
}
.opponent,
.difficulity {
  @include base.button-style;
}

.difficulity {
  font-size: 20px;
}

.shapeScreen {
  .shapes {
    margin-bottom: 0;
    width: 100%;
  }
  .shape {
    width: 150px;
    height: 150px;
    background-color: transparent;
  }

  #randomPlayerHeader {
    transition: 0.3s;
    font-size: 23px;
  }

  .makeDissapear {
    transform: scale(0);
  }

  #randomPlayerHeader.styled {
    border: 3px solid base.$purple;
    width: fit-content;
    height: fit-content;
    color: base.$purple;
    background-color: rgba($color: base.$yellow, $alpha: 1);
    border-radius: 23px;
    transform: scale(1);
  }

  #crossBackground,
  #donutBackground {
    height: 100%;
    width: 50%;
  }

  #crossBackground {
    background-image: url(../img/background-crosses.png);
    border-right: 4px solid base.$purple;
  }

  #donutBackground {
    background-image: url(../img/background-donuts.png);
    border-left: 4px solid base.$purple;
  }
  .backgroundButton,
  .backgroundButton:focus,
  .backgroundButton:hover,
  .backgroundButton:active,
  .backgroundButton:visited {
    background-color: transparent;
    border: none;
    color: inherit;
    font: inherit;
    margin: 0;
    padding: 0;
    text-align: left;
    text-decoration: none;
    cursor: pointer;
    outline: none;
  }

  #crossBackground,
  #donutBackground {
    visibility: hidden;
    transition: 0.5s;
  }

  #crossBackground.visible,
  #donutBackground.visible {
    visibility: visible;
  }

  .loading:after {
    content: " .";
    font-size: 25px;
    animation: dots 1s steps(5, end) infinite;
  }

  @keyframes dots {
    0%,
    20% {
      color: base.$purple;
      text-shadow: 0.25em 0 0 base.$purple, 0.5em 0 0 base.$purple;
    }
    40% {
      color: base.$yellow;
      text-shadow: 0.25em 0 0 base.$purple, 0.5em 0 0 base.$purple;
    }
    60% {
      text-shadow: 0.25em 0 0 base.$yellow, 0.5em 0 0 base.$purple;
    }
    80%,
    100% {
      text-shadow: 0.25em 0 0 base.$yellow, 0.5em 0 0 base.$yellow;
    }
  }
}

@media only screen and (min-width: 800px) {
  .tictactoe .letter {
    img {
      width: 150px;
      height: 150px;
    }
  }
  .shapes > #randomPlayerHeader {
    font-size: 40px;
  }

  #randomPlayerHeader > .loading::after {
    font-size: 40px;
  }
}

@media (pointer: fine) {
  .startButton,
  .opponent,
  .difficulity {
    transition: 0.2s;
    &:hover {
      box-shadow: 0 0 30px 5px rgba($color: white, $alpha: 0.8);
      transform: scale(1.1);
    }

    &:active {
      transform: scale(1.05);
    }
  }

  .shapes > #crossBackground,
  .shapes > #donutBackground {
    filter: grayscale(100%);

    &:hover {
      filter: grayscale(0);
    }
  }
}
